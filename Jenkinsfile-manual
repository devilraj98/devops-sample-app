pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'devops-sample-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        AWS_REGION = 'us-east-1'
        // Replace with your actual ECR repository URL
        ECR_REPO = 'YOUR_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/devops-sample-app'
        ECS_CLUSTER = 'devops-cluster'
        ECS_SERVICE = 'devops-service'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Node.js dependencies...'
                sh 'npm install'
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                sh 'npm test'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPO}:${DOCKER_TAG}"
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPO}:latest"
                }
            }
        }
        
        stage('Login to ECR') {
            steps {
                echo 'Logging into AWS ECR...'
                withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}"
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                echo 'Pushing Docker image to ECR...'
                script {
                    sh "docker push ${ECR_REPO}:${DOCKER_TAG}"
                    sh "docker push ${ECR_REPO}:latest"
                }
            }
        }
        
        stage('Deploy to ECS') {
            steps {
                echo 'Deploying to ECS...'
                withAWS(credentials: 'aws-credentials', region: "${AWS_REGION}") {
                    sh """
                        aws ecs update-service \
                            --cluster ${ECS_CLUSTER} \
                            --service ${ECS_SERVICE} \
                            --force-new-deployment \
                            --region ${AWS_REGION}
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up Docker images...'
            sh 'docker system prune -f'
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo 'Application deployed to ECS!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
            echo 'Check the logs above for details.'
        }
    }
}